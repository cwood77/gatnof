#include "generator.hpp"
#include "ir.hpp"
#include <fstream>

namespace coml {

void generator::generate(const std::string& name, const std::string& outPath, ir& ir)
{
   auto& oTable = ir.oTable; // ALIAS

   // generate
   std::ofstream out(outPath);
   out << "// *******************************" << std::endl;
   out << "// ** code generated by coml" << std::endl;
   out << "// *******************************" << std::endl;
   out << std::endl;
   out << "#include \"../../src/cmn/service.hpp\"" << std::endl;
   out << "#include \"../../src/cui/api.hpp\"" << std::endl;
   out << "#include \"../../src/cui/pen.hpp\"" << std::endl;
   out << "#include \"../../src/tcatlib/api.hpp\"" << std::endl;
   out << "#include <iostream>" << std::endl;

   // generate the image
   out << std::endl;
   out << "class " << name << "_image : public cui::iImage {" << std::endl;
   out << "public:" << std::endl;
   out << "   virtual void render()" << std::endl;
   out << "   {" << std::endl;
   out << "      tcat::typePtr<cmn::serviceManager> svcMan;" << std::endl;
   out << "      auto& pn = svcMan->demand<pen::object>();" << std::endl;
   out << std::endl;

   for(int i=0;i<ir.height;i++)
   {
      out << "      pn.str() << \"";

      size_t jOffset = 0;
      auto& line = ir.lines[i+1];
      for(size_t j=0;j!=line.length();j++)
      {
         if(::isdigit(line.c_str()[j]))
         {
            int id = 0;
            int n = 0;
            ::sscanf(line.c_str()+j,"%d%n",&id,&n);
            auto& objs = oTable.demand(id);
            for(auto *pObj : objs)
            {
               pObj->place(cui::pnt(j+1-jOffset,i+1));
               pObj->render(out);
            }
            jOffset += n;
            j += (n-1);
         }
         else if(line.c_str()[j] == '_')
            ; // ignore this char
         else
            out << std::string(1,line.c_str()[j]);
      }
      out << "\" << std::endl;" << std::endl;
   }

   out << "   }" << std::endl;
   out << std::endl;
   out << "   virtual cui::pnt demandPnt(const std::string& id) { throw 3.14; }" << std::endl;
   out << "};" << std::endl;

   // generate the image factory
   generateFactory(name + "_image","cui::iImage",out);

   // generate any control object(s)
   oTable.foreach<controlObject>([&](auto& ctl)
   {
      out << std::endl;
      out << "class " << name << "_" << ctl.name << "_ctl : public " << ctl.baseType << " {" << std::endl;
      out << "protected:" << std::endl;
      out << "   virtual void formatText1(std::ostream& o)" << std::endl;
      out << "   {" << std::endl;
      if(!ctl.format1.empty())
         out << "      o" << ctl.format1 << ";" << std::endl;
      out << "   }" << std::endl;
      out << "   virtual void formatText2(std::ostream& o)" << std::endl;
      out << "   {" << std::endl;
      if(!ctl.format2.empty())
         out << "      o" << ctl.format2 << ";" << std::endl;
      out << "   }" << std::endl;
      out << "   virtual void formatText3(std::ostream& o)" << std::endl;
      out << "   {" << std::endl;
      if(!ctl.format3.empty())
         out << "      o" << ctl.format3 << ";" << std::endl;
      out << "   }" << std::endl;
      out << "   virtual void formatText4(std::ostream& o)" << std::endl;
      out << "   {" << std::endl;
      if(!ctl.format4.empty())
         out << "      o" << ctl.format4 << ";" << std::endl;
      out << "   }" << std::endl;
      out << "};" << std::endl;
   });

   // generate the screen
   out << std::endl;
   out << "class " << name << "_screen : public cui::basicScreen {" << std::endl;
   out << "private:" << std::endl;
   out << "   " << name << "_image m_image;" << std::endl;
   oTable.foreach<controlObject>([&](auto& ctl)
   {
      out << "   " << name << "_" << ctl.name << "_ctl m_" << ctl.name << ";" << std::endl;
   });
   out << std::endl;
   out << "public:" << std::endl;
   out << "   " << name << "_screen()" << std::endl;
   out << "   {" << std::endl;
   out << "      publishObject(\"\",m_image);" << std::endl;
   oTable.foreach<controlObject>([&](auto& ctl)
   {
      out << "      publishObject(\"" << ctl.name << "\",m_" << ctl.name << ");" << std::endl;
   });
   oTable.foreach<buttonControlObject>([&](auto& ctl)
   {
      out << "      m_" << ctl.name << ".setFaceText(\"" << ctl.face << "\");" << std::endl;
   });
   out << "   }" << std::endl;
   out << std::endl;
   out << "   virtual void render()" << std::endl;
   out << "   {" << std::endl;
   out << "      m_image.render();" << std::endl;
   oTable.foreach<controlObject>([&](auto& ctl)
   {
      out << "      m_" << ctl.name << ".initialize(cui::pnt(" << ctl.pnt.x << "," << ctl.pnt.y << ")," << ctl.length << "," << ctl.height << ");" << std::endl;
   });
   out << "   }" << std::endl;
   out << "};" << std::endl;

   // generate the image factory
   generateFactory(name + "_screen","cui::iScreen",out);
}

void generator::generateFactory(const std::string& typeName, const std::string& cuiType, std::ostream& out)
{
   // generate the image factory
   out << std::endl;
   out << "class " << typeName << "_fac : public cui::plugInFactoryT<" << typeName << "," << cuiType << "> {" << std::endl;
   out << "public:" << std::endl;
   out << "   " << typeName << "_fac() : cui::plugInFactoryT<" << typeName << "," << cuiType << ">(\"" << typeName << "\") {}" << std::endl;
   out << "};" << std::endl;
   out << std::endl;
   out << "tcatExposeTypeAs(" << typeName << "_fac,cui::iPlugInFactory);" << std::endl;
}

} // namespace coml
