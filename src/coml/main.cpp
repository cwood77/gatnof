#include <cstring>
#include <fstream>
#include <iostream>
#include <vector>

int main(int argc, const char *argv[])
{
   std::cout << "{{" << std::endl;
   for(int i=0;i<argc;i++)
   {
      std::cout << "  " << argv[i] << std::endl;
   }
   std::cout << "}}" << std::endl;

   // load all the lines
   std::vector<std::string> lines;
   {
      std::ifstream in(argv[1]);
      while(in.good())
      {
         std::string line;
         std::getline(in,line);
         lines.push_back(line);
      }
   }

   // enforce ID
   if(::strncmp(lines[0].c_str(),"coml v1 ",8) != 0)
   {
      std::cerr << "bad coml header" << std::endl;
      return -1;
   }

   // read index
   int idx = 0;
   ::sscanf(lines[0].c_str(),"coml v1 %d",&idx);

   // compute name
   std::string name;
   {
      const char *pThumb = ::strstr(argv[1],"/screen.") + 8;
      if(!pThumb)
      {
         std::cerr << "bad coml file path" << std::endl;
         return -1;
      }
      name = std::string(pThumb,::strlen(pThumb) - 5);
   }

   // generate
   std::ofstream out(argv[2]);
   out << "// *******************************" << std::endl;
   out << "// ** code generated by coml" << std::endl;
   out << "// *******************************" << std::endl;
   out << std::endl;
   out << "#include \"../../src/cui/api.hpp\"" << std::endl;
   out << "#include <iostream>" << std::endl;
   out << std::endl;
   out << "class " << name << "_image : public cui::iImage {" << std::endl;
   out << "public:" << std::endl;
   out << "   virtual void render()" << std::endl;
   out << "   {" << std::endl;
   for(int i=0;i<idx;i++)
   {
      auto& line = lines[i+1];
      out << "      std::cout << \"" << line << "\" << std::endl;" << std::endl;
   }
   out << "   }" << std::endl;
   out << "};" << std::endl;

   return 0;
}
